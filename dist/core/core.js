"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.__private__ = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const shortid_1 = __importDefault(require("shortid"));
// 参照先
const dataFilePath = path_1.default.join(os_1.default.homedir(), 'todo.json');
// 遅延処理
const setTimeoutPromise = (count) => {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, count);
    });
};
exports.__private__ = {
    reviver: (key, value) => {
        if (key === 'expire') {
            return new Date(value);
        }
        else {
            return value;
        }
    },
    replacer: (key, value) => {
        if (key !== 'expire') {
            return value;
        }
        return new Date(value).toISOString();
    },
};
const loadTaskList = async () => {
    const exist = await fs_extra_1.default.pathExists(dataFilePath); // ...(b)
    if (!exist) {
        // データファイルがなけれが、ファイルを作成して、初期データを保存する
        fs_extra_1.default.ensureFileSync(dataFilePath);
        await fs_extra_1.default.writeJSON(dataFilePath, { data: [] });
    }
    // データファイルを読み込む
    const jsonData = (await fs_extra_1.default.readJSON(dataFilePath, {
        reviver: exports.__private__.reviver,
    }));
    return jsonData.data;
};
const saveTaskList = async (taskList) => {
    await fs_extra_1.default.writeJSON(dataFilePath, { data: taskList }, {
        replacer: exports.__private__.replacer,
        spaces: 2,
    });
};
const saveTask = async (task) => {
    const taskList = await loadTaskList();
    const existTask = taskList.find(pTask => pTask.id === task.id);
    if (!task.id || !existTask) {
        task.id = (0, shortid_1.default)();
        taskList.push(task);
    }
    else {
        existTask.complete = task.complete;
        existTask.expire = task.expire;
        existTask.taskName = task.taskName;
    }
    await saveTaskList(taskList);
    return taskList;
};
const deleteTask = async (id) => {
    const taskList = await loadTaskList();
    const deletedTaskList = taskList.filter(task => task.id !== id);
    await saveTaskList(deletedTaskList);
    return deletedTaskList;
};
const core = {
    loadTaskList,
    saveTask,
    deleteTask,
};
exports.default = core;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2NvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0RBQTBCO0FBQzFCLDRDQUFvQjtBQUNwQixnREFBd0I7QUFDeEIsc0RBQThCO0FBSTlCLE1BQU07QUFDTixNQUFNLFlBQVksR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFlBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUUxRCxPQUFPO0FBQ1AsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQWEsRUFBaUIsRUFBRTtJQUN6RCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzNCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNaLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRVcsUUFBQSxXQUFXLEdBQUc7SUFDekIsT0FBTyxFQUFFLENBQUMsR0FBVyxFQUFFLEtBQWMsRUFBVyxFQUFFO1FBQ2hELElBQUksR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUNwQixPQUFPLElBQUksSUFBSSxDQUFDLEtBQWUsQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUNELFFBQVEsRUFBRSxDQUFDLEdBQVcsRUFBRSxLQUFjLEVBQVcsRUFBRTtRQUNqRCxJQUFJLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakQsQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxLQUFLLElBQXNCLEVBQUU7SUFDaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxrQkFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFDMUQsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLG9DQUFvQztRQUNwQyxrQkFBRSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoQyxNQUFNLGtCQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsZUFBZTtJQUNmLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDaEQsT0FBTyxFQUFFLG1CQUFXLENBQUMsT0FBTztLQUM3QixDQUFDLENBQXNCLENBQUM7SUFDekIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFBRSxRQUFpQixFQUFpQixFQUFFO0lBQzlELE1BQU0sa0JBQUUsQ0FBQyxTQUFTLENBQ2hCLFlBQVksRUFDWixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFDbEI7UUFDRSxRQUFRLEVBQUUsbUJBQVcsQ0FBQyxRQUFRO1FBQzlCLE1BQU0sRUFBRSxDQUFDO0tBQ1YsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUFFLElBQVcsRUFBb0IsRUFBRTtJQUN2RCxNQUFNLFFBQVEsR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0lBQ3RDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUMxQixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO1FBQ3BCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckI7U0FBTTtRQUNMLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0tBQ3BDO0lBQ0QsTUFBTSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBb0IsRUFBRTtJQUN4RCxNQUFNLFFBQVEsR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO0lBQ3RDLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFVO0lBQ2xCLFlBQVk7SUFDWixRQUFRO0lBQ1IsVUFBVTtDQUNYLENBQUM7QUFFRixrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xyXG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHNob3J0aWQgZnJvbSAnc2hvcnRpZCc7XHJcbmltcG9ydCB7IElUYXNrIH0gZnJvbSAnLi4vc3RhdGVzL0lUYXNrJztcclxuaW1wb3J0IElDb3JlIGZyb20gJy4vSUNvcmUnO1xyXG5cclxuLy8g5Y+C54Wn5YWIXHJcbmNvbnN0IGRhdGFGaWxlUGF0aCA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICd0b2RvLmpzb24nKTtcclxuXHJcbi8vIOmBheW7tuWHpueQhlxyXG5jb25zdCBzZXRUaW1lb3V0UHJvbWlzZSA9IChjb3VudDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHJlc29sdmUoKTtcclxuICAgIH0sIGNvdW50KTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBfX3ByaXZhdGVfXyA9IHtcclxuICByZXZpdmVyOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogdW5rbm93biA9PiB7XHJcbiAgICBpZiAoa2V5ID09PSAnZXhwaXJlJykge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUgYXMgc3RyaW5nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICB9LFxyXG4gIHJlcGxhY2VyOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogdW5rbm93biA9PiB7XHJcbiAgICBpZiAoa2V5ICE9PSAnZXhwaXJlJykge1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUgYXMgc3RyaW5nKS50b0lTT1N0cmluZygpO1xyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBsb2FkVGFza0xpc3QgPSBhc3luYyAoKTogUHJvbWlzZTxJVGFza1tdPiA9PiB7XHJcbiAgY29uc3QgZXhpc3QgPSBhd2FpdCBmcy5wYXRoRXhpc3RzKGRhdGFGaWxlUGF0aCk7IC8vIC4uLihiKVxyXG4gIGlmICghZXhpc3QpIHtcclxuICAgIC8vIOODh+ODvOOCv+ODleOCoeOCpOODq+OBjOOBquOBkeOCjOOBjOOAgeODleOCoeOCpOODq+OCkuS9nOaIkOOBl+OBpuOAgeWIneacn+ODh+ODvOOCv+OCkuS/neWtmOOBmeOCi1xyXG4gICAgZnMuZW5zdXJlRmlsZVN5bmMoZGF0YUZpbGVQYXRoKTtcclxuICAgIGF3YWl0IGZzLndyaXRlSlNPTihkYXRhRmlsZVBhdGgsIHsgZGF0YTogW10gfSk7XHJcbiAgfVxyXG4gIC8vIOODh+ODvOOCv+ODleOCoeOCpOODq+OCkuiqreOBv+i+vOOCgFxyXG4gIGNvbnN0IGpzb25EYXRhID0gKGF3YWl0IGZzLnJlYWRKU09OKGRhdGFGaWxlUGF0aCwge1xyXG4gICAgcmV2aXZlcjogX19wcml2YXRlX18ucmV2aXZlcixcclxuICB9KSkgYXMgeyBkYXRhOiBJVGFza1tdIH07XHJcbiAgcmV0dXJuIGpzb25EYXRhLmRhdGE7XHJcbn07XHJcblxyXG5jb25zdCBzYXZlVGFza0xpc3QgPSBhc3luYyAodGFza0xpc3Q6IElUYXNrW10pOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICBhd2FpdCBmcy53cml0ZUpTT04oXHJcbiAgICBkYXRhRmlsZVBhdGgsXHJcbiAgICB7IGRhdGE6IHRhc2tMaXN0IH0sXHJcbiAgICB7XHJcbiAgICAgIHJlcGxhY2VyOiBfX3ByaXZhdGVfXy5yZXBsYWNlcixcclxuICAgICAgc3BhY2VzOiAyLFxyXG4gICAgfSxcclxuICApO1xyXG59O1xyXG5cclxuY29uc3Qgc2F2ZVRhc2sgPSBhc3luYyAodGFzazogSVRhc2spOiBQcm9taXNlPElUYXNrW10+ID0+IHtcclxuICBjb25zdCB0YXNrTGlzdCA9IGF3YWl0IGxvYWRUYXNrTGlzdCgpO1xyXG4gIGNvbnN0IGV4aXN0VGFzayA9IHRhc2tMaXN0LmZpbmQocFRhc2sgPT4gcFRhc2suaWQgPT09IHRhc2suaWQpO1xyXG4gIGlmICghdGFzay5pZCB8fCAhZXhpc3RUYXNrKSB7XHJcbiAgICB0YXNrLmlkID0gc2hvcnRpZCgpO1xyXG4gICAgdGFza0xpc3QucHVzaCh0YXNrKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZXhpc3RUYXNrLmNvbXBsZXRlID0gdGFzay5jb21wbGV0ZTtcclxuICAgIGV4aXN0VGFzay5leHBpcmUgPSB0YXNrLmV4cGlyZTtcclxuICAgIGV4aXN0VGFzay50YXNrTmFtZSA9IHRhc2sudGFza05hbWU7XHJcbiAgfVxyXG4gIGF3YWl0IHNhdmVUYXNrTGlzdCh0YXNrTGlzdCk7XHJcbiAgcmV0dXJuIHRhc2tMaXN0O1xyXG59O1xyXG5cclxuY29uc3QgZGVsZXRlVGFzayA9IGFzeW5jIChpZDogc3RyaW5nKTogUHJvbWlzZTxJVGFza1tdPiA9PiB7XHJcbiAgY29uc3QgdGFza0xpc3QgPSBhd2FpdCBsb2FkVGFza0xpc3QoKTtcclxuICBjb25zdCBkZWxldGVkVGFza0xpc3QgPSB0YXNrTGlzdC5maWx0ZXIodGFzayA9PiB0YXNrLmlkICE9PSBpZCk7XHJcbiAgYXdhaXQgc2F2ZVRhc2tMaXN0KGRlbGV0ZWRUYXNrTGlzdCk7XHJcbiAgcmV0dXJuIGRlbGV0ZWRUYXNrTGlzdDtcclxufTtcclxuXHJcbmNvbnN0IGNvcmU6IElDb3JlID0ge1xyXG4gIGxvYWRUYXNrTGlzdCxcclxuICBzYXZlVGFzayxcclxuICBkZWxldGVUYXNrLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZTtcclxuIl19